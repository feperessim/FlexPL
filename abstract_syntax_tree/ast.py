'''
Copyright (C) 2018 Felipe de Lima Peressim
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

# Generic Node
class Node():
    def __init__(self,type,children=None,leaf=None):
         self.type = type
         if children:
              self.children = children
         else:
              self.children = [ ]
         self.leaf = leaf

# The classes below are nodes to the AST generated by ply yaac
# The first rule is a program which is an scope by itself
# it may have a function or a class which are scopes themselves
class Program():
    def __init__(self, scope=None, anotherScope=None):
        self.type = "Program"
        self.scope = scope
        self.anotherScope = anotherScope

# The scope of a class
class ClassDefinition():
    def __init__(self, className, scope):
        self.type = "Class Definition"
        self.className = className
        self.scope = scope
    
# The scope of a function
class FunctionDefinition():
    def __init__(self, dataType, functionName, arguments, scope, line, column):
        self.type = "Function Definition"
        self.dataType = dataType
        self.functionName = functionName
        self.arguments = arguments
        self.scope = scope
        self.line = line
        self.column = column
        self.formalParameterCounter = 0
        self.formalParameterTypeList = []
        
class Expr: pass

# A expression
class BinaryOp():
    def __init__(self,left,op,right):
        self.type = "Binop"
        self.left = left
        self.right = right
        self.op = op

# Not expr
class NotExpression():
    def __init__(self, right):
        self.type = "Not Expression"
        self.right = right
        
# Number, might be any type, need to see how to check it yet!
class Number(Expr):
    def __init__(self,value):
        self.type = "Number"
        self.value = value
        
# Scope, note being used but might be useful for something yet idk
class Block: 
    def __init__(self, statements):
        self.type = "New Scope. 'BLOCK'"
        self.statements = statements

# List of variables, perhaps will contain only nodes 
# to the variables declared.
class VarList():
    def __init__(self, varDeclaration, varList):
        self.type = "List of variables"
        self.varDeclaration = varDeclaration
        self.varList = varList

# Declaration of variables
class VarDeclaration():
    def __init__(self,dataType, varName, line, column):
        self.type = "Declaration of Variables"
        self.dataType = dataType
        self.varName = varName
        self.line = line
        self.column = column
        self.isAssigned = False

# Statements
class Statements():
    def __init__(self, statement, moreStatements):
        self.type = "Statements"
        self.statement = statement
        self.moreStatements = moreStatements
   
# Assignment
class Assignment():
    def __init__(self, var, value, line, column):
        self.type = "Assignment"
        self.var = var 
        self.value = value
        self.line = line
        self.column = column

# Data Type - e.g int, char, string float, void
class DataType():
    def __init__(self, dtype):
        self.type = "Data Type"
        self.dtype = dtype

# if-statement 
class IfStatement():
    def __init__(self, logicalExpression, scope):
        self.type = "If Statement"
        self.logicalExpression = logicalExpression
        self.scope=scope
    
# if-else-statement        
class IfElseStatement(IfStatement):
    def __init__(self,logicalExpression, scope, elseScope):
        super(IfElseStatement, self).__init__(logicalExpression, scope)
        self.type = "If-Else-Statement"
        self.elseScope = elseScope
        
# while-statement
class WhileStatement():
    def __init__(self, logicalExpression, scope):
        self.type = "While Statement"
        self.logicalExpression = logicalExpression
        self.scope=scope
        
# for-statement
class ForStatement():
    def __init__(self, varDeclaration, logicalExpression, attribution, scope):
        self.type = "ForWhile Statement"
        self.varDeclaration = varDeclaration
        self.logicalExpression = logicalExpression
        self.attribution = attribution
        self.scope=scope
        
# Return statement
class ReturnStatement():
    def __init__(self, expression):
        self.type = 'Return statement'
        self.expression = expression


# Int Const
# Float Const
# String Const
# char Const
class Const():
    def __init__(self, dtype, value):
        self.type = 'Constant'
        self.dtype = dtype
        self.value = value

# Function Call
class FunctionCall():
    def __init__(self, functionName, args, line, column):
        self.type = 'Function Call'
        self.functionName = functionName
        self.args = args
        self.line = line
        self.column = column

class ParameterList():
    def __init__(self, expression, parameterList):
        self.type = "Function call Parameter List"
        self.expression = expression
        self.parameterList = parameterList
